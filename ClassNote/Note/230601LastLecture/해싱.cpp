/*
	해싱이란?
	검색방법의 한가지 종류
	기존의 검색방법과 차이점
	기존 - 순차검색(처음부터 비교해서 검색하는 방법), 이진검색(데이터를 하나씩 보느냐, 서치스페이스를 절반부터 시작해서 하느냐, 어쨌든 비교를 사용하는 검색)
	해싱 - 비교 x 네가 거기 있는줄 알고 있었다의 방법 // 아파트 집에 갈 때 순차검색이 아니라 스트레이트로 바로 가듯이
	해싱은 저장할 때 아무대나 저장, 정렬만해서 저장하는게 아니라 그값을 저장할 때 정해진 규칙에 따라 저장함.

	HLR 통신사에서 우리 ID를 검색할 때 전화번호로 검색한다면? 바로 찾을 수 있을 거다.

	예시)
	1. 나눗셈 방법 : 학번 뒷번호 3자리로 검색한다, 학번/1000000
	2. Folding 방법 : 2020182028 -> 2020 + 182 + 028 이런식으로 정보를 접어 쓰기
	3. 중간제곱방법
	4. 자릿수 분석 방법 : 뒷번호 3자리로 검색하는 것처럼 쉽게 한다.

	일반적인 핵심 방법이 없어서 해싱에 대한 예시를 들기 어려워 개념적인 설명을 한다.
	그럼 어떤 해싱방법이 좋은거냐?
	충돌x, 메모리 낭비 적으면 좋음
	메모리 낭비를 적게 만들 수록 정교하고 복잡하게 만들어야 할거고 충돌이 안날거란 보장이 없다

	그럼 만약 줄인다면 충돌이 났을 때 대처 방법은?
	ex) 알파벳 첫글자 a-z로 변환하는 해싱
	acos, define, float, exp, atan, char...

	0 : acos, atan -> 보조의자 갖다놓고 옆에 앉으세요
	1
	2 : char

	개방 주소법
	0 : acos
	1 : atan -> 그 옆자리에 앉으세요
	2 : char
	충돌 많이 일어나긴 할 듯

	Chaining  
	0 : aocs->atoi 등으로 malloc 포인터연산으로 만든다.
	단점 : 할당안된 곳엔 메모리낭비가 있을 수 있음, 최악의 경우 오도오브N이 될 수 있음
	ex) 학번 가운데 18다 앉으세요

	해싱은 조건이 만만치 않아서 매번 쓸 수 있는 방법은 아니다.
	그치만 시스템, 운영채제같은 곳에선 해싱을 많이 쓴다.



*/